"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[836],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},f="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),u=a,h=f["".concat(s,".").concat(u)]||f[u]||d[u]||o;return n?r.createElement(h,i(i({ref:t},p),{},{components:n})):r.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[f]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3584:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:3,sidebar_label:"FAQ"},i="FAQ",l={unversionedId:"faq",id:"faq",title:"FAQ",description:"How do I apply the replace changes listed by the JSON output of diff command ?",source:"@site/docs/faq.md",sourceDirName:".",slug:"/faq",permalink:"/i18n-tools/docs/faq",draft:!1,editUrl:"https://github.com/jy95/i18n-tools/edit/master/website/docs/faq.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,sidebar_label:"FAQ"},sidebar:"tutorialSidebar",previous:{title:"Diff",permalink:"/i18n-tools/docs/commands/diff"}},s={},c=[{value:"How do I apply the replace changes listed by the JSON output of diff command ?",id:"how-do-i-apply-the-replace-changes-listed-by-the-json-output-of-diff-command-",level:2}],p={toc:c},f="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(f,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"faq"},"FAQ"),(0,a.kt)("h2",{id:"how-do-i-apply-the-replace-changes-listed-by-the-json-output-of-diff-command-"},"How do I apply the replace changes listed by the JSON output of diff command ?"),(0,a.kt)("p",null,"Simply with a Nodejs script :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs').promises;\n\ntry {\n    // TODO replace with path to your file in develop or whatever branch\n    let originalFilePath = path.resolve(__dirname, \"fr.json\");\n    let jsonData = await fs.readFile(originalFilePath, 'utf8');\n    let currentObj = JSON.parse(jsonData);\n\n    // TODO replace with path to the file generated by diff command\n    let changesFilePath = path.resolve(__dirname, \"diff_fr.json\");\n    let jsonData2 = await fs.readFile(changesFilePath, 'utf8');\n    let changesFile = JSON.parse(jsonData2);\n    let changes = changesFile.changes;\n\n    // Proper variable for that\n    let result = Object.assign({}, currentObj);\n\n    // Add changed values\n    // (Feel free to edit the file generated by diff command if you want to override some changes)\n    for(let modifiedField of changes.filter(c => [\"REPLACED\"].includes(c.type)) ) {\n        _.set(result, modifiedField.key, modifiedField.newValue);\n    }\n\n    // write result\n    // TODO Add a path for destination\n    await fs.writeFile(\"\", JSON.stringify(result, null, 4));\n\n} catch(err) {\n    console.warn(\"Something bad happend\");\n    console.error(err);\n    process.exit(1);\n}\n")))}d.isMDXComponent=!0}}]);