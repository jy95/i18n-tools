"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[70],{7208:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"faq","title":"FAQ","description":"How do I apply the replace changes listed by the JSON output of diff command ?","source":"@site/docs/faq.md","sourceDirName":".","slug":"/faq","permalink":"/i18n-tools/docs/faq","draft":false,"unlisted":false,"editUrl":"https://github.com/jy95/i18n-tools/edit/master/website/docs/faq.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"sidebar_label":"FAQ"},"sidebar":"tutorialSidebar","previous":{"title":"Diff","permalink":"/i18n-tools/docs/commands/diff"}}');var o=n(4848),i=n(8453);const s={sidebar_position:3,sidebar_label:"FAQ"},r="FAQ",l={},d=[{value:"How do I apply the replace changes listed by the JSON output of diff command ?",id:"how-do-i-apply-the-replace-changes-listed-by-the-json-output-of-diff-command-",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"faq",children:"FAQ"})}),"\n",(0,o.jsx)(t.h2,{id:"how-do-i-apply-the-replace-changes-listed-by-the-json-output-of-diff-command-",children:"How do I apply the replace changes listed by the JSON output of diff command ?"}),"\n",(0,o.jsx)(t.p,{children:"Simply with a Nodejs script :"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-js",children:"const _ = require('lodash');\nconst path = require('path');\nconst fs = require('fs').promises;\n\ntry {\n    // TODO replace with path to your file in develop or whatever branch\n    let originalFilePath = path.resolve(__dirname, \"fr.json\");\n    let jsonData = await fs.readFile(originalFilePath, 'utf8');\n    let currentObj = JSON.parse(jsonData);\n\n    // TODO replace with path to the file generated by diff command\n    let changesFilePath = path.resolve(__dirname, \"diff_fr.json\");\n    let jsonData2 = await fs.readFile(changesFilePath, 'utf8');\n    let changesFile = JSON.parse(jsonData2);\n    let changes = changesFile.changes;\n\n    // Proper variable for that\n    let result = Object.assign({}, currentObj);\n\n    // Add changed values\n    // (Feel free to edit the file generated by diff command if you want to override some changes)\n    for(let modifiedField of changes.filter(c => [\"REPLACED\"].includes(c.type)) ) {\n        _.set(result, modifiedField.key, modifiedField.newValue);\n    }\n\n    // write result\n    // TODO Add a path for destination\n    await fs.writeFile(\"\", JSON.stringify(result, null, 4));\n\n} catch(err) {\n    console.warn(\"Something bad happend\");\n    console.error(err);\n    process.exit(1);\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(6540);const o={},i=a.createContext(o);function s(e){const t=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(i.Provider,{value:t},e.children)}}}]);