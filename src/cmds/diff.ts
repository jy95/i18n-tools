import fs from "fs";
import path from "path";

// checks import
import { 
    resolveChecksInOrder,
    DIFF_CHECKS
} from "../checks/index";

// For typing
// eslint-disable-next-line
import type { Argv } from "yargs";
import { backupPaths, parsePathsToJSON } from "../middlewares/middlewares";
import { CommonDiffArguments } from "../types/diffTypes";

// sub fonctions
import detectChanges from "./diff/detectChanges";
import reporters from "./diff/reporter-strategies/index";

// checks for this command
const CHECKS = DIFF_CHECKS.CHECKS;

// named exports
export const command = 'diff [options] <files..>';
export const description = 'Compare at least two i18n files & generate a report';

export const builder = function (y : Argv) {
    return y
        .option("filename", {
            type: "string",
            alias: "of",
            describe: "Name of the output file generated by this CLI (without extension)"
        })
        .option("outputDir", {
            type: "string",
            alias: "od",
            describe: "Output folder where to store the output file",
            default: process.cwd()
        })
        .option("outputFormat", {
            describe: "Output format",
            choices: ["JSON"],
            default: "JSON"
        })
        // default value for filename
        .default("filename", function() {
            const date = new Date();
            const timestamp = `${date.getDate()}-${date.getMonth() + 1}-${date.getFullYear()} ${date.getHours()}h${date.getMinutes()}m${date.getSeconds()}`;
            return `diff_report_${timestamp}`;
        })
        .config('settings', function (configPath) {
            return JSON.parse(fs.readFileSync(configPath, 'utf-8'))
        })
        // coerce path provided by outputDir
        .coerce(["outputDir"], path.resolve)
        // save provided paths into a backup key
        .middleware(backupPaths("files", "paths"), true)
        // coerce varidic path(s) into Object(s)
        .middleware(parsePathsToJSON("files"), true)
        // validations
        .check(resolveChecksInOrder(CHECKS))
}

export const handler = async function (argv : any) {
    try {
        const changes = detectChanges(argv as CommonDiffArguments);
        console.log(`Preparing the report file ...`);
        await reporters({
            yargs: argv as CommonDiffArguments,
            changes: changes
        });
        console.log("Successfully wrote the report file");
        return Promise.resolve(undefined);
    } catch(/* istanbul ignore next */ err) {
        /* istanbul ignore next */
        return Promise.reject(err);
    }
}

// default export
export default {
    command: command,
    description: description,
    builder: builder,
    handler: handler,
};